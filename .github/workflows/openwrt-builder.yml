#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  schedule:
    # Run monthly on the 12th at 20:00 UTC (04:00 Beijing Time)
    - cron: '0 20 12 * *'
  workflow_dispatch:
    inputs:
      repository_owner:
        description: 'Repository owner/organization'
        required: false
        default: 'immortalwrt'
      repository_name:
        description: 'Repository name'
        required: false
        default: 'immortalwrt'
      repository_branch:
        description: 'Target branch'
        required: false
        default: 'openwrt-24.10'
      enable_ssh:
        description: 'Enable SSH debugging?'
        type: boolean
        required: true
        default: false

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # Global environment variables
      REPO_OWNER: ${{ github.event.inputs.repository_owner || 'immortalwrt' }}
      REPO_NAME: ${{ github.event.inputs.repository_name || 'immortalwrt' }}
      REPO_BRANCH: ${{ github.event.inputs.repository_branch || 'openwrt-24.10' }}
      REPO_URL: "https://github.com/${{ github.event.inputs.repository_owner || github.event.client_payload.repository_owner }}/${{ github.event.inputs.repository_name || github.event.client_payload.repository_name }}"
      FEEDS_CONF: feeds.conf.default
      CONFIG_FILE: .config
      DIY_P1_SH: diy-part1.sh
      DIY_P2_SH: diy-part2.sh
      UPLOAD_BIN_DIR: false
      UPLOAD_FIRMWARE: true
      UPLOAD_RELEASE: true
      OPENWRT_NAME: immortalwrt
      OPENWRT_ARCH: x86_64
      TZ: Asia/Shanghai




    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir
          sudo rm -rf /workdir
          sudo ln -s /mnt/workdir /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Start SSH Session (Debug)
        if: |
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.enable_ssh == 'true'
        uses: mxschmitt/action-tmate@v3    

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$THREADS threads will be used for compiling"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
  
      - name: Check space usage
        if: (!cancelled())
        run: df -hT
  
      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin
  
      - name: Organize firmware files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          FIRMWARE_DIR=$PWD
          if [ -z "$(ls -A $FIRMWARE_DIR)" ]; then
            echo "Error: Firmware directory is empty!"
            exit 1
          fi
          echo "FIRMWARE=$FIRMWARE_DIR" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
  
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
  
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          release_tag=$(date +"%Y.%m.%d-%H%M")
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" > release.txt || true
          echo "status=success" >> $GITHUB_OUTPUT
  
      - name: Upload firmware to GitHub Release
        if: steps.organize.outputs.status == 'success' && steps.tag.outputs.status == 'success' && !cancelled()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Clean up old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 2
  
      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
